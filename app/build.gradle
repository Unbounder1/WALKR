/*
 * Copyright ...
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * ...
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android' version '1.8.10' // Specify Kotlin plugin version
    // Uncomment if using Jetpack Compose
    // id 'org.jetbrains.kotlin.plugin.compose' version '1.8.10'
}

import java.util.Properties
import java.io.FileInputStream

// Load API keys from local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

android {
    namespace "com.WALKR.core.geospatial"
    compileSdkVersion 35

    defaultConfig {
        applicationId "com.WALKR.core.geospatial"
        minSdkVersion 28 // Ensure minSdkVersion is compatible with all dependencies
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"

        // Add a single API key to BuildConfig since all keys are the same
        buildConfigField "String", "API_KEY", "\"${localProperties['MY_API_KEY'] ?: ""}\""
    }

    buildTypes {
        release {
            minifyEnabled false // Set to true if you want to enable ProGuard/R8
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // Set manifestPlaceholders inside buildTypes block using the same API key
        buildTypes.each {
            it.manifestPlaceholders = [GOOGLE_MAPS_API_KEY: localProperties['MY_API_KEY'] ?: ""]
        }
    }

    // **5. Compile Options**
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17" // Match Java version
    }

    buildFeatures {
        buildConfig = true
        // If using Jetpack Compose, enable it
        // compose = true
    }

    // **6. Compose Options (If Using Jetpack Compose)**
    /*
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.2"
    }
    */
}

dependencies {
    // **ARCore Libraries**
    implementation 'com.google.ar:core:1.46.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'

    // **OBJ Loader**
    implementation 'de.javagl:obj:0.4.0'

    // **AndroidX and Material Design**
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.concurrent:concurrent-futures:1.1.0'
    implementation 'com.google.guava:guava:31.1-android'

    // **Google Maps API (For Routing)**
    implementation 'com.google.android.gms:play-services-maps:19.0.0'

    // **Network Requests**
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    // **JSON Parsing**
    implementation 'com.google.code.gson:gson:2.10.1'

    // **Kotlin Standard Library**
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.10" // Use the latest stable version

    // **Vosk for Speech Recognition**
    implementation "com.alphacephei:vosk-android:0.3.47@aar"
    implementation "net.java.dev.jna:jna:5.13.0@aar"

    // **Kotlin Coroutines for Asynchronous Operations**
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    // **Jetpack Compose (Optional)**
    // Uncomment if using Jetpack Compose
    /*
    implementation "androidx.compose.ui:ui:1.7.5"
    implementation "androidx.compose.ui:ui-tooling-preview:1.5.2"
    implementation "androidx.activity:activity-compose:1.7.2"
    implementation "androidx.compose.material3:material3:1.1.1"
    */
}

// **8. ProGuard/R8 Rules (Optional)**
// Add the following lines to your proguard-rules.pro file if necessary
/*
# Kotlin
-keep class kotlin.** { *; }
-dontwarn kotlin.**

# Vosk
-keep class org.vosk.** { *; }
-dontwarn org.vosk.**
*/
